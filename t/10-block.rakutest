use Test;

# Test if block
{
    my $ast := Q:to/CODE/.AST("ZH");
    如果 True {
        "如果测试通过"
    }
    CODE
    is $ast.EVAL, "如果测试通过", "如果";
}

# Test if-else blocks
{
    my $ast := Q:to/CODE/.AST("ZH");
    如果 False {
        "假"
    } 否则 {
        "真"
    }
    CODE
    is $ast.EVAL, "真", "如果-否则";
}

# Test unless block
{
    my $ast := Q:to/CODE/.AST("ZH");
    如果不 False {
        "如果不测试通过"
    }
    CODE
    is $ast.EVAL, "如果不测试通过", "如果不";
}

# Test with block
{
    my $ast := Q:to/CODE/.AST("ZH");
    局部 $value = "defined";
    若定义且真 $value {
        "值已定义"
    }
    CODE
    is $ast.EVAL, "值已定义", "若定义且真";
}

# Test without block
{
    my $ast := Q:to/CODE/.AST("ZH");
    局部 $value;
    局部 $result = "default";
    若未定义或假 $value {
        $result = "值未定义";
    }
    $result
    CODE
    is $ast.EVAL, "值未定义", "若未定义或假";
}

# Test orwith
{
    my $ast := Q:to/CODE/.AST("ZH");

    如果 0 { "0" }
    或用 Nil { "Nil" }
    或用 1 { "1" };

    CODE
    is $ast.EVAL, "1", "或用";
}

# Test do with / orwith block
{
    my $ast := Q:to/CODE/.AST("ZH");
    局部 $value;
    局部 $result = do 若定义且真 $value {
        "有值: $value"
    } 或用 Nil {
        "使用 Nil"
    } 或用 "默认值" {
        "使用默认值: $_"
    }
    CODE
    is $ast.EVAL, "使用默认值: 默认值", "do 若定义且真 / 或用";
}

# Test given-when-default blocks
{
    my $ast := Q:to/CODE/.AST("ZH");
    局部 $value = "test";
    针对 $value {
        若是 "test" { "匹配成功" }
        其他情况 { "匹配失败" }
    }
    CODE
    is $ast.EVAL, "匹配成功", "针对-若是-其他情况";
}

# Test for
{
    my $ast := Q:to/CODE/.AST("ZH");
    局部 @result;
    对每个 1..3 -> $i {
        @result.push($i);
    }
    @result.join(",")
    CODE
    is $ast.EVAL, "1,2,3", "对每个";
}

# Test while
{
    my $ast := Q:to/CODE/.AST("ZH");
    局部 $count = 0;
    局部 @result;
    有条件循环 $count < 3 {
        @result.push($count);
        $count++;
    }
    @result.join(",")
    CODE
    is $ast.EVAL, "0,1,2", "有条件循环";
}

# Test until
{
    my $ast := Q:to/CODE/.AST("ZH");
    局部 $count = 0;
    局部 @result;
    直到 $count >= 3 {
        @result.push($count);
        $count++;
    }
    @result.join(",")
    CODE
    is $ast.EVAL, "0,1,2", "直到";
}

# Test loop
{
    my $ast := Q:to/CODE/.AST("ZH");
    局部 $count = 0;
    局部 @result;
    循环 {
        @result.push($count);
        $count++;
        如果 $count >= 3 {last;}
    }
    @result.join(",")
    CODE
    is $ast.EVAL, "0,1,2", "循环";
}

# Test repeat-until block
{
    my $ast := Q:to/CODE/.AST("ZH");
    局部 $count = 0;
    局部 @result;
    重复执行 {
        @result.push($count);
        $count++;
    } 直到 $count >= 3;
    @result.join(",")
    CODE
    is $ast.EVAL, "0,1,2", "重复执行-直到";
}

# Test simple nested blocks
{
    my $ast := Q:to/CODE/.AST("ZH");
    局部 $x = 5;
    如果 $x > 0 {
        如果 $x > 10 {
            "大于10"
        } 否则 {
            "大于0但小于等于10"
        }
    }
    CODE
    is $ast.EVAL, "大于0但小于等于10", "嵌套如果";
}

# Test whenever block
{
    my $ast := Q:to/CODE/.AST("ZH");
    局部 $chan = Channel.new;
    局部 @results;
    开始 {
        反应 {
            每当 $chan -> $value {
                @results.push($value * 2);
                如果 @results.elems >= 3 {收工}
            }
        }
    }
    $chan.send(1);
    $chan.send(2);
    $chan.send(3);
    sleep 0.1;
    @results.join(",")
    CODE
    is $ast.EVAL, "2,4,6", "每当";
}

done-testing;
